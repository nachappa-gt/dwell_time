"""

This program joins the abnormal request data (generated by ard_process.py)
with the science core data.

Copyright (C) 2017.  xAd, Inc.  All Rights Reserved.

@author: xiangling

"""

import os
import argparse
from pyspark import SparkConf, SparkContext
from pyspark.sql import HiveContext
from pyspark.sql.functions import col


    
def merge_fill(hiveContext,country, logtype, date, hour, loc_score,
               input_dir, abd_dir, output_dir):

    locscores = {'tll':'loc_score=95','pos':'loc_score=94'}   
    
    avro_path = os.path.join(input_dir, 'fill', loc_score) 
    df_all = hiveContext.read.format("com.databricks.spark.avro").load(avro_path)
            
    ard_path = os.path.join(abd_dir, 'fill=FILLED', locscores[loc_score]) 
    df_ard = hiveContext.read.format("orc").load(ard_path)
        
    # FIXME: some original r_s_info may get lost with the join.  The logic should be
    #        r_s_info = (r_s_info1 is not null) ? r_s_info1 : r_s_info.
    df = df_all.join(df_ard, 'request_id','left_outer').drop('r_s_info').select(
        'r_timestamp', 'request_id', 'pub_id', 'tsrc_id', 'sp_iab_category',
        'user_iab_category', 'user_ip', 'city', 'state', 'zip', 'country',
        'latitude','longitude', 'sl_adjusted_confidence',
        'sl_json', 'fp_sic', 'fp_brand', 'uid', 'uid_type', 'uid_hash_type',
        'age', 'gender', 'carrier', 'os', 'device_os_version', 'device_make',
        'device_model', 'device_year', 'device_type',
        'pub_type', 'bundle', 'sp_user_age', 'sp_user_gender','int_banner',
        'isp', 'too_freq_uid', 'banner_size', 'request_filled', 'pub_bid_floor',
        col('r_s_info1').alias('r_s_info'),
        'ad_id', 'campaign_id', 'adgroup_id', 'creative_id', 'mslocation_id',
        'ad_vendor_id', 'category', 'matched_user_iab_category',
        'matched_sp_iab_category', 'adomain', 'creative_type', 'rtb_bucket_id',
        'neptune_bucket_id', 'd_s_info', 'adv_bid_rates',
        'pub_bid_rates', 'ad_returned', 'ad_impression', 'click', 'call',
        'click_to_call', 'map', 'directions', 'website', 'description', 'sms',
        'moreinfo', 'review', 'winbid', 'save_to_app', 'save_to_ph_book',
        'arrival', 'checkin', 'media', 'coupon', 'passbook', 'app_store',
        'video_start', 'video_end', 'xad_revenue',
        'pub_revenue', 'is_repeated_user', 'tracking_user_agent',
        'tracking_user_ip','fp_matches', 'connection_type', 'geo_type',
        'app_site_domain', 'dnt', 'geo_block_id', 'event_count',
        'filter_weight','parcel_ids', 'cookie_uid','matched_poitags')
            
    output_path = os.path.join(output_dir, 'fill', loc_score)
    df.write.mode("overwrite").format("orc").option("compression","zlib"). \
        mode("overwrite").save(output_path)


def merge_nf(hiveContext, country, logtype, date, hour, loc_score,
             input_dir, abd_dir, output_dir):

    locscores = {'tll':'loc_score=95','pos':'loc_score=94'}   
    
    avro_path = os.path.join(input_dir, 'nf', loc_score) 
    df_schema = hiveContext.read.format("com.databricks.spark.avro").load('/prod/ard/schema')
    schema = df_schema.schema
    df_all = hiveContext.read.format("com.databricks.spark.avro").load(avro_path, schema = schema)
            
    ard_path = os.path.join(abd_dir,'fill=NOT_FILLED', locscores[loc_score]) 
    df_ard = hiveContext.read.format("orc").load(ard_path)            

    df = df_all.join(df_ard, 'request_id','left_outer').drop('r_s_info').select(
    'r_timestamp', 'request_id', 'pub_id', 'tsrc_id', 'sp_iab_category', 'user_iab_category',
    'user_ip', 'city', 'state', 'zip', 'country', 'latitude','longitude', 'sl_adjusted_confidence',
    'sl_json', 'fp_sic', 'fp_brand', 'uid', 'uid_type', 'uid_hash_type', 'age', 'gender', 'carrier',
    'os', 'device_os_version', 'device_make', 'device_model', 'device_year', 'device_type',
    'pub_type', 'bundle', 'sp_user_age', 'sp_user_gender','int_banner','isp', 'too_freq_uid',
    'banner_size', 'request_filled', 'pub_bid_floor',
    col('r_s_info1').alias('r_s_info'), 'ad_id', 'campaign_id',
    'adgroup_id', 'creative_id', 'mslocation_id', 'ad_vendor_id', 'category',
    'matched_user_iab_category', 'matched_sp_iab_category', 'adomain',
    'creative_type', 'rtb_bucket_id', 'neptune_bucket_id', 'd_s_info', 'adv_bid_rates',
    'pub_bid_rates', 'ad_returned', 'ad_impression', 'click', 'call', 'click_to_call',
    'map', 'directions', 'website', 'description', 'sms', 'moreinfo', 'review',
    'winbid', 'save_to_app', 'save_to_ph_book', 'arrival', 'checkin', 'media',
    'coupon', 'passbook', 'app_store', 'video_start', 'video_end', 'xad_revenue',
    'pub_revenue', 'is_repeated_user', 'tracking_user_agent', 'tracking_user_ip',
    'fp_matches', 'connection_type', 'geo_type', 'app_site_domain',
    'dnt', 'geo_block_id', 'event_count', 'filter_weight','parcel_ids','cookie_uid',
    'matched_poitags') 
            
    output_path = os.path.join(output_dir, 'nf', loc_score)
    df.write.mode("overwrite").format("orc").option("compression","zlib").\
        mode("overwrite").save(output_path)


def save_orc(hiveContext, country, logtype, date, hour, fill, loc_score, 
             input_dir, output_dir):
    """Save as ORC"""

    avro_path = os.path.join(input_dir, fill, loc_score)
    output_path = os.path.join(output_dir, fill, loc_score)

    df_schema = hiveContext.read.format("com.databricks.spark.avro").\
        load('/prod/ard/schema')
    schema = df_schema.schema

    df = hiveContext.read.format("com.databricks.spark.avro").\
        load(avro_path,schema = schema)
   
    if not df.rdd.isEmpty():
        df.write.mode("overwrite").format("orc").\
            option("compression","zlib").\
            mode("overwrite").save(output_path)
            

def main():
    
    """ Add arguments in the command to specify the information of the data to process
     such as country, prod_type, dt, fill and loc_score"""
    parser = argparse.ArgumentParser()
    parser.add_argument("--country", help="country")
    parser.add_argument("--logtype", help="logtype")
    parser.add_argument("--date", help="date")
    parser.add_argument("--hour", help="hour")
    parser.add_argument("--avro_partitions",help="avro_partitions")
    parser.add_argument("--abd_partitions",help="abd_partitions")
    parser.add_argument("--executor_mem",help="executor_memory")
    parser.add_argument("--executors_num",help="num_executors")
    parser.add_argument("--exe_cores",help="executor_cores")
    parser.add_argument("--input_dir",help="science core source dir")
    parser.add_argument("--abd_dir",help="abd dir")
    parser.add_argument("--output_dir",help="output_dir")
    
    
    """Parse the arguments """
    args = parser.parse_args()
    if args.country:
        country = args.country
    if args.logtype:
        logtype = args.logtype
    if args.date:
        date = args.date
    if args.hour:
        hour = args.hour
    if args.avro_partitions:
        partitions_str = args.avro_partitions
        avro_partitions = partitions_str.split(',')
    if args.abd_partitions:
        partitions_str = args.abd_partitions
        abd_partitions = partitions_str.split(',') 
    if args.input_dir:
        input_dir = args.input_dir
    if args.abd_dir:
        abd_dir = args.abd_dir
    if args.output_dir:
        output_dir = args.output_dir
    
    conf = SparkConf().setAppName('ard_join' + '/' +country + '/' + logtype +
        '/' + date + '/' + hour)
    sc = SparkContext(conf = conf)
    hiveContext = HiveContext(sc) 

    fill_status = ['fill', 'nf']
    locscore_status = ['tll', 'pos', 'rest']

    for fill in fill_status:
        for loc_score in locscore_status:
            partition = '-'.join([fill, loc_score])
            if (partition in abd_partitions):
                if fill == 'fill':
                    merge_fill(hiveContext, country, logtype, date, hour,
                               loc_score, input_dir, abd_dir, output_dir)
                if fill == 'nf':
                    merge_nf(hiveContext, country, logtype, date, hour,
                             loc_score, input_dir, abd_dir, output_dir)
            else:
                if partition in avro_partitions:
                    save_orc(hiveContext, country, logtype, date, hour, fill,
                             loc_score, input_dir, output_dir)
    
    sc.stop()


if __name__ == "__main__":
    main()  
           



